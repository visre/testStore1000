<?xml version="1.0" encoding="ISO-8859-1"?>
<!DOCTYPE Paquets SYSTEM "Paquet.dtd">
<ServicePackage Nom="mobadminPackage" Titre="mobadminPackage" Artifact="mobadmin.zip" Options="poDynamic" IsAuthRequired="false" publishDate="2014-03-26T11:34:10+01:00">
<CopyRight Createur="flfay" DateCreation="29/01/2014" Version="">(C) Copr. Sage France</CopyRight>
<Certificat>2D6822A5F515BBCE6C90CBE28210BEF7C233C6A579ECA385199912878B756659777178F77B294A62715DC30F72EAC8A50C173682BB72624432F1C42FD9155F9149EA886FF97CD11FA39EAFD99FFDE6317EF187E6286D6D0B8B411CE7D1</Certificat>
<Enumeres/>
<Classes>
<Classe Stereotype="strMsgService" ClassName="mobadminPackageSupport" Libelle="mobadminPackageSupport" Options="cloBusiness,cloDynamic,cloNoPersistent,cloService" soapPluralName="mobadminPackageSupport" soapNameSpace="http://www.sage.com/fr/line1000/mobadminPackage">
<Attributs/>
<Operations>
<Operation Nom="refresh" Date="06/02/14" Auteur="flfay" soapName="MethodName" soapAction="urn:mobadminPackageSupport#MethodName" soapNameSpace="http://www.sage.com/fr/line1000/mobadminPackage" DateCode="31/01/14" AuteurCode="flfay">
<Signature>Procedure refresh(req:TJson; var res:TObject);</Signature>
<Code>
//Procedure search(req:TJson; var res:TObject);
var p : TdbmFolderAccessRequestProcess; i : integer; json:TJson;
begin
 json := TJson.Create(&#39;&#39;);
 json.title := Format(_TP(&#39;Les demandes de connexion&#39;),[]);
 p := TdbmFolderAccessRequestProcess.Create;
 p.Init;
 for i := 0 to p.dbmFolderAccReqViewList.Count-1 do
  begin
   json.result[i].id := p.dbmFolderAccReqViewList.refs[i].id;
   json.result[i].name := p.dbmFolderAccReqViewList.refs[i].UserMail;
   json.result[i].ope := &#39;/detail&#39;;
  end;
 res := json;
end;
</Code>
</Operation>
<Operation Nom="detail" Date="31/01/14" Auteur="flfay" soapName="MethodName" soapAction="urn:mobadminPackageSupport#MethodName" soapNameSpace="http://www.sage.com/fr/line1000/mobadminPackage" DateCode="06/02/14" AuteurCode="flfay">
<Signature>Procedure detail(req:TJson; var res:TObject);</Signature>
<Code>
//Procedure detail(req:TJson; var res:TObject);
var
 p : TdbmFolderAccessRequestProcess;
 i,j,annCount : integer;
 json:TJson;
 vAnn : TdbmAuthDirectory;
 vAppSoc : TdbmApplicationdbmSociety;
 v : TdbmFolderAccessRequestView;
begin
 json := TJson.Create(&#39;&#39;);
 json.title := Format(_TP(&#39;Les demandes de connexion&#39;),[]);
 p := TdbmFolderAccessRequestProcess.Create;
 p.Init; //pas terrible mais contrepartie du state less
 for i := 0 to p.dbmFolderAccReqViewList.Count-1 do
  begin
   v := p.dbmFolderAccReqViewList.refs[i] ;
   if (v.id=req.id) then
    begin
     json.id := v.id;

     json.requestDate.t := _TP(&#39;Date de la demande&#39;);
     json.requestDate.v := v.RequestDate;

     json.firstName.t := _TP(&#39;Prénom&#39;);
     json.firstName.v := v.UserFirstName;

     json.lastName.t := _TP(&#39;Nom&#39;);
     json.lastName.v := v.UserLastName;

     json.mailAddress.t := _TP(&#39;Adresse mail&#39;);
     json.mailAddress.v := v.UserMail;

     json.application.t := _TP(&#39;Application&#39;);
     json.application.v := v.dbmApplication.Caption;//always set

     annCount := TdbmAuthDirectory.CountWhere(&#39;&#39;,true,[]);
     if (annCount&gt;1) then
      begin
       json.ann.t := _TP(&#39;Annuaire&#39;);
       json.ann.cb.id := &#39;ann&#39;;
       j := 0;
       foreachp vAnn in TdbmAuthDirectory.CreateCursorWhere(&#39;&#39;,&#39;&#39;,True,[]) do
        begin
         json.ann.cb.arr[j].Caption := vAnn.Caption;
         j := j + 1;
        end;
      end;

     json.soc.t := _TP(&#39;Sociétés&#39;);
     json.soc.cb.id := &#39;soc&#39;;
     j := 0;
     foreachp vAppSoc in TdbmApplicationdbmSociety.CreateCursorWhere(&#39;oiddbmApplication=%1&#39;,&#39;&#39;,True,[v.oiddbmApplication]) do
      begin
       json.soc.cb.arr[j].Caption := vAppSoc.dbmsociety.Caption;
       j := j + 1;
      end;

     json.acceptCaption := _TP(&#39;Accepter la demande&#39;);
     json.deleteCaption := _TP(&#39;Supprimer&#39;);

     if Assigned(v.dbmAuthDirectory) then
      json.annDefault := v.dbmAuthDirectory.Caption;
     //default value
     if (v.dbmSocieties.Count&gt;0) then
      json.socDefault := (v.dbmSocieties.Refs[0] as TdbmSociety).Caption;

     break;

    end;
  end;
 res := json;
end;
</Code>
</Operation>
<Operation Nom="accept" Date="31/01/14" Auteur="flfay" soapName="MethodName" soapAction="urn:mobadminPackageSupport#MethodName" soapNameSpace="http://www.sage.com/fr/line1000/mobadminPackage" DateCode="06/02/14" AuteurCode="flfay">
<Signature>Procedure accept(req:TJson; var res:TObject);</Signature>
<Code>
//Procedure accept(req:TJson; var res:TObject);
var
 p : TdbmFolderAccessRequestProcess;
 v : TdbmFolderAccessRequestView;
 i,indx : integer;
 json:TJson;
 soc : TdbmSociety;
begin
 json := TJson.Create(&#39;&#39;);
 p := TdbmFolderAccessRequestProcess.Create;
 v := TdbmFolderAccessRequestView.Create;
 v.Init(req.id);
 if v.Id&lt;&gt;&#39;&#39; then
  begin
   if req.Exists(&#39;ann&#39;) then
    v.dbmAuthDirectory := ClassManager.FindObject(&#39;TdbmAuthDirectory&#39;,&#39;(caption = %1)&#39;,&#39;&#39;,true,[req.ann]);
   for i := 0 to req.soc.count-1 do
    begin
     soc := ClassManager.FindObject(&#39;TdbmSociety&#39;,&#39;(caption = %1)&#39;,&#39;&#39;,False,[req.soc[i]]);
     v.dbmSocieties.addRef(soc);
    end;

   try
    p.ExecuteRequest(v);
    json.result := true;
   except
    json.result := false;
    json.reason := e.Message;
   end
  end
 else
  begin
   json.result := false;
   json.reason := _TP(&#39;Requête non trouvée&#39;);
  end;

 res := json;
end;
</Code>
</Operation>
<Operation Nom="delete" Date="31/01/14" Auteur="flfay" soapName="MethodName" soapAction="urn:mobadminPackageSupport#MethodName" soapNameSpace="http://www.sage.com/fr/line1000/mobadminPackage" DateCode="06/02/14" AuteurCode="flfay">
<Signature>Procedure delete(req:TJson; var res:TObject);</Signature>
<Code>
//Procedure delete(req:TJson; var res:TObject);
var
 p : TdbmFolderAccessRequestProcess;
 i,indx : integer;
 json:TJson;
 r : TdbmFolderAccessRequest;
begin
 json := TJson.Create(&#39;&#39;);
 ClassManager.Begintran;
 try
  r := ClassManager.FindObjectByOID(req.id) as TdbmFolderAccessRequest;
  if Assigned(r) then
   begin
    r.deleted := true;
    classmanager.commit;
    json.result := true;
   end
  else
   begin
    json.result := false;
    json.reason := _TP(&#39;Requête non trouvée&#39;);
   end;

 except
  classmanager.RollBack;
  json.result := false;
  json.reason := e.message;
 end;

 res := json;

end;
</Code>
</Operation>
</Operations>
</Classe>
</Classes>
<Interfaces/>
<Extensions/>
</ServicePackage>
